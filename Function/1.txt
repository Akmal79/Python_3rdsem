**Definition, call, positional and keyword parameter, Default parameters, variable,number of arguments, Recursion, Callbacks, Closure.**

Think of a function like a machine with slots.
Definition: You build the machine (function) with a name and slots (parameters) for information (arguments).
Call: You use the machine by giving it the information (arguments) it needs through the slots (parameters).
Types of Slots:

Order Matters Slots (Positional): These slots only work if you fill them in the exact order they were built (defined).
Name Tags (Keyword): These slots don't care about order, as long as you clearly label the information (argument) with the slot's name (parameter).
Optional Extras:

Default Fillings: Some slots can come pre-filled (default parameters) if you don't provide your own information (argument).
Extra Bins (Variable Arguments): The machine can have special bins (*args, **kwargs) to handle a bunch of extra information (arguments) you might give it.
Special Techniques:

Calling Itself (Recursion): Imagine the machine has a button that makes it restart itself (call itself) with smaller pieces of the information (arguments) until it's done.
Passing the Machine as Information (Callbacks): You can give another machine (function) this machine (function) as information (argument) to be used later.
Remembering Secrets (Closures): The machine can secretly remember some information (variables) from where it was built, even after it's been used (called).



--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
**1. Lambda Functions (The Mini-Me Function):**

* Think of a lambda function as a tiny, one-time-use function you create on the spot.
* You give it a quick instruction (like adding 10) and some data (like a number), and it zips out the answer without a fancy name.
* Example: You want to add 10 to everything in your list. Instead of writing a whole function, you can use a lambda like a mini-calculator:`add_ten = lambda x: x + 10`.
* Here, `x` is any number you throw at it, and it adds 10.

**2. Map Function (The Element-Wise Changer):**

* Imagine you have a list of numbers and want to do the same thing to all of them, like squaring them.
* The `map` function acts like a magic map that applies your instruction (squaring in this case) to each element in your list, one by one.
* It doesn't change the original list, but it creates a new one with the transformed elements.

**3. Filter Function (The Chooser):**

* Say you have a list of numbers and only want the even ones.
* The `filter` function acts like a picky eater, going through your list and picking out only the elements that meet your criteria (even numbers in this case).
* Again, it creates a new list with only the chosen elements.

**4. Reduce Function (The Accumulator):**

* This one's a bit more advanced. Imagine you have a list of numbers and want to find the total sum.
* The `reduce` function acts like a snowball rolling down a hill, accumulating things as it goes.
* It takes your instruction (like multiplication) and applies it to the first two elements in your list,
* then takes the result and combines it with the third element, and so on, until it gets to the end, giving you a single answer (the total sum in our case).

Remember, lambda functions are often used with `map`, `filter`, and `reduce` to tell them what to do with your data. 
