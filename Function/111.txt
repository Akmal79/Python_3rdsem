**Definition(def):**
In Python, a function is a reusable block of code that performs a specific task. It's defined using the def keyword, followed by the function name, parentheses for parameters, a colon, and the function body indented with statements.

**Call:**
A function is executed by calling it. You use the function name followed by parentheses containing the arguments (values) to be passed to the function's parameters.

**Positional and Keyword Parameters:**
**Positional parameters:These are parameters defined in the function's definition order. When calling the function, arguments must be provided in the same order as the parameters.
**Keyword parameters: These are parameters passed by name using parameter_name=value syntax within the function call. This allows you to provide arguments in any order.

**Default Parameters:**
You can assign default values to parameters in the function definition using the = operator. These parameters become optional during the call.
If no value is provided, the default value is used. Default parameters must follow non-default parameters.

**Variable Number of Arguments:**
Python allows functions to accept a variable number of arguments using:
*args for a tuple of positional arguments beyond the defined parameters.
**kwargs for a dictionary of keyword arguments beyond the defined parameters.

**Recursion:**
Recursion is a function that calls itself within its definition. It's useful for solving problems that can be broken down into smaller subproblems of the same type.
Be cautious to avoid infinite recursion by adding a base case that stops the recursive calls.

**Callbacks:**
A callback is a function passed as an argument to another function. The receiving function then calls the callback function at a specific point in its execution. 
This allows for flexible and modular code.

**Closures:**
A closure is a function that remembers and has access to variables from its enclosing scope even after the outer function has finished executing. 
This creates a "closed" environment for the inner function. Closures are often used with callbacks to preserve state or data.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

**1. Lambda Functions:**

* Lambda functions are anonymous functions defined using the `lambda` keyword.
* They are used for short, concise expressions, often within other functions.
* Syntax: `lambda arguments: expression`

**Example:**

```python
add_ten = lambda x: x + 10
result = add_ten(5)  # result will be 15
```

**2. Map Function:**

* The `map()` function applies a function to all elements of an iterable (like a list or tuple).
* It creates a new iterator containing the results of the function applied to each element.

**Example:**

```python
numbers = [1, 2, 3, 4]
squared_numbers = map(lambda x: x * x, numbers)  # squared_numbers is an iterator
print(list(squared_numbers))  # Output: [1, 4, 9, 16]
```

**3. Filter Function:**

* The `filter()` function creates a new iterator containing elements from an iterable that pass a test condition.
* It takes a function and an iterable as arguments. The function is applied to each element, and only elements for which the function returns `True` are included in the new iterator.

**Example:**

```python
numbers = [1, 2, 3, 4, 5]
even_numbers = filter(lambda x: x % 2 == 0, numbers)  # even_numbers is an iterator
print(list(even_numbers))  # Output: [2, 4]
```

**4. Reduce Function:**

* The `reduce()` function applies a function cumulatively to the items of an iterable, reducing it to a single value.
* It takes a function and an iterable as arguments. The function is applied to the first two elements, then the result is applied to the third element, and so on.

**Example:**

```python
from functools import reduce  # reduce is in the functools module

numbers = [1, 2, 3, 4]
product = reduce(lambda x, y: x * y, numbers)  # product will be 24
print(product)
```

**Key Points:**

* Lambda functions are often used within `map`, `filter`, and `reduce` to define the logic applied to elements.
* `map` and `filter` create new iterators, while `reduce` produces a single value.
* These functions can be powerful tools for concise and efficient data manipulation in Python.
