**Function Fundamentals:**

* **Definition(def):** A function definition acts as a blueprint for a reusable block of code. It specifies the function's name, parameters (inputs), and the operations it performs. 

* **Call:** When you invoke a function, you provide arguments (actual values) that correspond to the defined parameters. This triggers the function's execution. 

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

**Parameter Passing Mechanisms:**

* **Positional Parameters:** These parameters must be provided in the same order they are defined in the function signature. This approach is efficient but requires strict adherence to order.

* **Keyword Parameters:** Keyword arguments offer more flexibility. You can provide arguments in any order as long as you associate them with the corresponding parameter name using a `keyword=value` syntax. This enhances code readability and reduces errors when parameter order might not be clear.


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

**Enhancing Function Adaptability:**

* **Default Parameters:** These pre-assign values to parameters. If no argument is provided during the call, the function utilizes the default value. This allows you to create functions that work with or without specific arguments, improving usability.

* **Variable Number of Arguments:** Python provides mechanisms to handle an indefinite number of arguments using special parameters: `*args` for positional arguments and `**kwargs` for keyword arguments. These act as containers that can hold any additional information provided during the function call.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
**Advanced Function Techniques:**

* **Recursion:** This powerful paradigm allows a function to call itself. The function breaks down the problem into smaller subproblems, recursively calling itself with these subproblems until a base case is reached, leading to the solution of the original problem. Recursion is particularly useful for problems that exhibit self-similarity. 

* **Callbacks:** Callbacks are functions treated as arguments and passed to other functions. This enables dynamic behavior, 
where the specific functionality can be determined at runtime. Imagine passing a function as a tool to another function to be used later.

* **Closures:** Closures are functions that "remember" and maintain access to variables from their enclosing scope, even after the enclosing function has finished its execution. This creates a private space for the function to store data, even if it's called multiple times. Think of it as the function encapsulating a hidden set of variables from its creation environment, accessible even after the function's creation. 

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

**1. Lambda Functions:**

* Lambda functions are anonymous functions defined using the `lambda` keyword.
* They are used for short, concise expressions, often within other functions.
* Syntax: `lambda arguments: expression`

**Example:**

```python
add_ten = lambda x: x + 10
result = add_ten(5)  # result will be 15
```
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

**2. Map Function:**

* The `map()` function applies a function to all elements of an iterable (like a list or tuple).
* It creates a new iterator containing the results of the function applied to each element.

**Example:**

```python
numbers = [1, 2, 3, 4]
squared_numbers = map(lambda x: x * x, numbers)  # squared_numbers is an iterator
print(list(squared_numbers))  # Output: [1, 4, 9, 16]
```
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

**3. Filter Function:**

* The `filter()` function creates a new iterator containing elements from an iterable that pass a test condition.
* It takes a function and an iterable as arguments. The function is applied to each element, and only elements for which the function returns `True` are included in the new iterator.

**Example:**

```python
numbers = [1, 2, 3, 4, 5]
even_numbers = filter(lambda x: x % 2 == 0, numbers)  # even_numbers is an iterator
print(list(even_numbers))  # Output: [2, 4]
```
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

**4. Reduce Function:**

* The `reduce()` function applies a function cumulatively to the items of an iterable, reducing it to a single value.
* It takes a function and an iterable as arguments. The function is applied to the first two elements, then the result is applied to the third element, and so on.

**Example:**

```python
from functools import reduce  # reduce is in the functools module

numbers = [1, 2, 3, 4]
product = reduce(lambda x, y: x * y, numbers)  # product will be 24
print(product)
```
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
**Key Points:**

* Lambda functions are often used within `map`, `filter`, and `reduce` to define the logic applied to elements.
* `map` and `filter` create new iterators, while `reduce` produces a single value.
* These functions can be powerful tools for concise and efficient data manipulation in Python.
