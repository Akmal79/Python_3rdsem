Dictionaries are fundamental data structures in Python used to store collections of data in an **organized** way. 
Unlike lists and tuples that use numerical indexes for access, dictionaries employ a concept called **key-value pairs**.

**Key Concepts:**

- **Keys:** Keys act as unique identifiers for each piece of data in the dictionary. They must be immutable data types like strings, numbers, or tuples (hashable). A dictionary cannot have duplicate keys.
- **Values:** Values represent the actual data associated with each key. Values can be of any data type, including strings, numbers, lists, dictionaries, or even custom objects.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
**Creating Dictionaries:**

You can create dictionaries in Python using two main methods:

1. **Curly braces (`{}`)** : This is the most common way. Enclose a comma-separated list of key-value pairs within curly braces. The colon (`:`) separates each key from its corresponding value.
# Example dictionary
person = {
    "name": "Alice",
    "age": 30,
    "city": "New York"
}

2. **`dict()` constructor:** This method offers more flexibility for creating dictionaries from existing iterables (like lists) or key-value pairs.
# Using dict() constructor
fruits = dict(apple="red", banana="yellow", orange="orange")

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
**Accessing Values:**

To access a value in a dictionary, you use its corresponding key within square brackets (`[]`).

# Accessing Alice's age
age = person["age"]  # Returns 30

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
**Adding or Modifying Elements:**

Dictionaries are mutable, meaning you can change their content after creation. Here's how:

- **Adding a new key-value pair:** Assign a value to a new key that doesn't exist yet.
person["occupation"] = "Software Engineer"  # Adds a new key-value pair

- **Modifying an existing value:** Assign a new value to an existing key.
person["city"] = "London"  # Updates the value for the "city" key

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
**Removing Elements:**

There are two ways to remove elements from a dictionary:

- **`pop(key)` method:** This removes the key-value pair associated with the specified key and returns the value. If the key doesn't exist, it throws a `KeyError`.
favorite_fruit = fruits.pop("banana")  # Removes "banana" and returns its value

- **`del` keyword:** This removes the key-value pair associated with the specified key without returning anything.
del person["occupation"]  # Removes the "occupation" key-value pair

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
**Dictionary Methods:**

Python provides several built-in methods for working with dictionaries:

- **`keys()`:** Returns a view of all the keys in the dictionary.
- **`values()`:** Returns a view of all the values in the dictionary.
- **`items()`:** Returns a view of all key-value pairs as tuples.
- **`get(key, default)`:** Retrieves the value for a key. If the key doesn't exist, it returns the specified default value (defaults to `None` if not given).
- **`in`:** Checks if a key exists in the dictionary.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
**Advantages of Dictionaries:**

- **Fast retrieval by key:** Accessing elements by key is very efficient, making dictionaries ideal for situations where you need to look up data based on unique identifiers.
- **Flexible data storage:** Dictionaries can store various data types for each key, making them suitable for representing complex data structures.
- **Ordered data (Python 3.7+):** As of Python 3.7, dictionaries maintain the order in which key-value pairs were added.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
**Disadvantages of Dictionaries:**
- **Keys must be unique and immutable:** This can be a limitation if you need to use mutable data types as keys.
- **Slower insertion and deletion compared to lists:** While retrieval by key is fast, adding or removing elements can be slower than in lists due to the hashing process involved in key lookups.
